[
    {
        "file_type": "py",
        "file_last_modified": "2024-06-25T23:28:33.137418",
        "file_contents": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "file_type": "md",
        "file_last_modified": "2024-09-12T15:37:42.375956",
        "file_contents": "# cafequerator_backend\n"
    },
    {
        "file_type": "txt",
        "file_last_modified": "2024-09-13T15:42:38.227201",
        "file_contents": "asgiref==3.8.1\nCacheControl==0.14.0\ncachetools==5.5.0\ncertifi==2024.6.2\ncharset-normalizer==3.3.2\nDjango==5.0.6\ndjango-cors-headers==4.4.0\ndjango-environ==0.11.2\ndjango-firebase-orm==0.6.1\ndjango-rest-framework==0.1.0\ndjangorestframework==3.15.2\ndjangorestframework-simplejwt==5.3.1\nfirebase-admin==2.13.0\ngcloud==0.17.0\ngoogle-api-core==2.19.2\ngoogle-auth==2.34.0\ngoogle-cloud-core==2.4.1\ngoogle-cloud-firestore==2.18.0\ngoogle-cloud-storage==2.18.2\ngoogle-crc32c==1.6.0\ngoogle-resumable-media==2.7.2\ngoogleapis-common-protos==1.63.2\ngrpcio==1.66.1\ngrpcio-status==1.66.1\ngunicorn==23.0.0\nhttplib2==0.22.0\nidna==3.7\njws==0.1.3\nmsgpack==1.0.8\noauth2client==3.0.0\npackaging==24.1\nproto-plus==1.24.0\nprotobuf==5.27.2\npsycopg2==2.9.9\npyasn1==0.6.0\npyasn1_modules==0.4.0\npycryptodome==3.4.3\nPyJWT==2.9.0\npyparsing==3.1.2\npython-dotenv==1.0.1\npython-jwt==2.0.1\npytz==2024.2\nredis==5.0.6\nrequests==2.32.3\nrequests-toolbelt==0.7.0\nrsa==4.9\nsix==1.16.0\nsqlparse==0.5.0\ntzdata==2024.1\nurllib3==2.2.2\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-06-25T23:28:55.268291",
        "file_contents": "from django.contrib import admin\n\n# Register your models here.\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-06-25T23:28:55.270292",
        "file_contents": "from django.apps import AppConfig\n\n\nclass ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-09-15T14:14:24.076638",
        "file_contents": "from django.db import models\nfrom django.contrib.auth.models import AbstractUser\nfrom datetime import datetime\nimport pytz\n\n\n# Create your models here.\nclass User(AbstractUser):\n    email = models.CharField(max_length=255, unique=True)\n    password = models.CharField(max_length=255)\n    username = None\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = []\n\n\nclass Cafe_Info(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    Cafe_Name = models.CharField(max_length=255,default='')\n    Cafe_Address = models.CharField(max_length=500,default='')\n    Cafe_Contact = models.CharField(max_length=15,default='')\n    Owner_Name = models.CharField(max_length=255,default='')\n    Owner_Contact = models.CharField(max_length=15,default='')\n    No_of_Tables = models.IntegerField(default=1)\n    \nclass Spotify_Api_Parameters(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    access_token = models.CharField(max_length=500)\n    refresh_token = models.CharField(max_length=500)\n    expires_at = models.CharField(max_length=500)\n\nclass Vibe_Check_Parameters(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    Playlist_Vector = models.IntegerField()\n\nclass Track_Queue(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    Table_Number = models.IntegerField(default=-1)\n    Track_Name = models.CharField(max_length=255)\n    Track_Id = models.CharField(max_length=255)\n\nclass Tables_Queue(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    Table_Number = models.IntegerField()\n    Table_Status = models.BooleanField(default=False)\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-09-13T15:59:10.145642",
        "file_contents": "from rest_framework import serializers\nfrom .models import *\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'email', 'password']\n        extra_kwargs = {\n            'password': {'write_only': True}\n        }\n\n    def create(self, validated_data):\n        password = validated_data.pop('password', None)\n        instance = self.Meta.model(**validated_data)\n        if password is not None:\n            instance.set_password(password)\n        instance.save()\n        return instance\n\nclass CafeInfoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Cafe_Info\n        fields = ['Cafe_Name', 'Cafe_Address', 'Cafe_Contact', 'Owner_Name', 'Owner_Contact', 'No_of_Tables']\n\n\nclass CombinedUserCafeSerializer(serializers.ModelSerializer):\n    cafe_info = CafeInfoSerializer()  # Nesting the CafeInfoSerializer inside the User serializer\n\n    class Meta:\n        model = User\n        fields = ['id', 'email', 'password', 'cafe_info']\n        extra_kwargs = {\n            'password': {'write_only': True}\n        }\n\n    def create(self, validated_data):\n        # Extract cafe_info data\n        cafe_info_data = validated_data.pop('cafe_info', None)\n        \n        # Create User instance\n        password = validated_data.pop('password', None)\n        user_instance = self.Meta.model(**validated_data)\n        \n        if password is not None:\n            user_instance.set_password(password)\n        user_instance.save()\n        \n        # Create Cafe_Info instance\n        if cafe_info_data:\n            Cafe_Info.objects.create(user=user_instance, **cafe_info_data)\n        \n        return user_instance\n    \nclass SpotifyParameterSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Spotify_Api_Parameters\n        fields = [\"access_token\",\"refresh_token\",\"expires_at\"]\n\n\n            \n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-06-25T23:28:55.271284",
        "file_contents": "from django.test import TestCase\n\n# Create your tests here.\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-09-17T18:48:23.333517",
        "file_contents": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('register', SignupView.as_view()),\n    path('login', LoginView.as_view()),\n    path('logout', LogoutView.as_view()),\n    path('delete',DeleteUser.as_view()),\n    path('truncate', TruncateView.as_view()),\n    path('settoken', SetTokenView.as_view())\n\n]"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-09-18T11:42:28.650574",
        "file_contents": "from rest_framework.views import APIView, status\nfrom rest_framework.response import Response\nfrom rest_framework.exceptions import AuthenticationFailed\nfrom .serializers import *\nfrom .models import User\nimport jwt, datetime\nfrom datetime import datetime, timedelta, timezone\n\n\n\n\nclass SignupView(APIView):\n    def post(self, request):\n        serializer = CombinedUserCafeSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        serializer.save()\n        return Response({\"message\":\"Registeration Successfully\"}, status=status.HTTP_200_OK)\n    \nclass LoginView(APIView):\n    def post(self, request):\n        email = request.data['email']\n        password = request.data['password']\n\n        user = User.objects.filter(email=email).first()\n\n        if user is None:\n            return Response({\"error\":\"User Not Found\"},status=status.HTTP_400_BAD_REQUEST)\n        if not user.check_password(password):\n            return Response({\"error\":\"Incorrect Password\"},status=status.HTTP_400_BAD_REQUEST)\n        payload = {\n            'id': user.id,\n            'exp': datetime.now(timezone.utc) + timedelta(minutes=60),\n            'iat': datetime.now(timezone.utc)\n        }\n        token = jwt.encode(payload, 'secret', algorithm='HS256')\n\n\n        response = Response()\n\n        response.set_cookie(key='jwt', value=token, httponly=True)\n        response.data = {\n            'message': \"token set\"}\n\n        response.status_code = 200\n        return response\n    \n    def get(self,request):\n     \n        token = request.COOKIES.get('jwt')\n        # Check if the token exists\n        if not token:\n            return Response({\"error\": \"Unauthenticated User\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        try:\n            # Decode the JWT token to get the payload\n            payload = jwt.decode(token, 'secret', algorithms=['HS256'])\n        except jwt.ExpiredSignatureError as e:\n            return Response({\"error\": f\"{e}\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        # Find the user from the payload\n        user = User.objects.filter(id=payload['id']).first()\n        if user is None:\n            return Response({\"error\":\"User Not Found\"},status=status.HTTP_400_BAD_REQUEST)\n        \n\n        cafe_info = Cafe_Info.objects.filter(user=user).first()\n        token_info = Spotify_Api_Parameters.objects.filter(user=user).first()\n        response = Response()\n        \n\n        try:\n            token_info = { SpotifyParameterSerializer(token_info).data}\n        except:\n            token_info = \"Not Set\"\n\n        response.set_cookie(key='jwt', value=token, httponly=True)\n        response.data = {\n            \"cafe_info\": f\"{CafeInfoSerializer(cafe_info).data}\",\n            \"token_info\": f\"{token_info}\"\n        }\n\n        response.status_code = 200\n        return response\n\n   \n\nclass LogoutView(APIView):\n    def post(self, request):\n        response = Response()\n        response.delete_cookie('jwt')\n        response.data = {\n            'message': 'success'\n        }\n        response.status_code = 200\n        return response\n    \nclass DeleteUser(APIView):\n   \n    def delete(self, request, foramt = None):\n        token = request.COOKIES.get('jwt')\n        password = request.data['password']\n\n        if not token:\n            return Response({\"error\":\"Unauthenticated User\"},status=status.HTTP_400_BAD_REQUEST)\n        try:\n            payload = jwt.decode(token, 'secret', algorithms=['HS256'])\n\n        except jwt.ExpiredSignatureError as e:\n            return Response({\"error\":f\"{e}\"},status=status.HTTP_400_BAD_REQUEST)\n\n        user = User.objects.filter(id=payload['id']).first()\n\n        if not user.check_password(password):\n            return Response({\"error\":\"Incorrect Password\"},status=status.HTTP_400_BAD_REQUEST)\n        \n        user.delete()\n        return Response({\"message\":\"User Deleted Successfully\"}, status=status.HTTP_200_OK)\n\n\nclass TruncateView(APIView):\n    def post(self, request, format = None):\n        User.objects.all().delete()\n\n        return Response({\"message\":\"Data Gone\"},status=status.HTTP_410_GONE)\n    \n\nclass SetTokenView(APIView):\n    def post(self, request, format=None):\n        token = request.COOKIES.get('jwt')\n\n        # Check if the token exists\n        if not token:\n            return Response({\"error\": \"Unauthenticated User\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        try:\n            # Decode the JWT token to get the payload\n            payload = jwt.decode(token, 'secret', algorithms=['HS256'])\n        except jwt.ExpiredSignatureError as e:\n            return Response({\"error\": f\"{e}\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        # Find the user from the payload\n        user = User.objects.filter(id=payload['id']).first()\n\n        # Validate the incoming request data using the serializer\n        serializer = SpotifyParameterSerializer(data=request.data)\n        if serializer.is_valid(raise_exception=True):\n            access_token = serializer.validated_data.get(\"access_token\")\n            refresh_token = serializer.validated_data.get(\"refresh_token\")\n            expires_at = serializer.validated_data.get(\"expires_at\")\n\n\n            # Check if the Spotify parameters already exist for the user\n            spotify_params, created = Spotify_Api_Parameters.objects.update_or_create(\n                user=user,\n                defaults={\n                    \"access_token\": access_token,\n                    \"refresh_token\": refresh_token,\n                    \"expires_at\": expires_at  # Save the Unix timestamp as an integer\n                }\n            )\n\n            # Return the serialized data of the spotify_params\n            return Response({\"message\": \"token set\"}, status=status.HTTP_200_OK)\n        \n        return Response({\"message\": \"Invalid data\"}, status=status.HTTP_400_BAD_REQUEST)"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-06-25T23:28:55.271284",
        "file_contents": ""
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-08-25T14:30:31.487098",
        "file_contents": "# Generated by Django 5.0.6 on 2024-08-25 09:00\n\nimport django.contrib.auth.models\nimport django.db.models.deletion\nimport django.utils.timezone\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),\n                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),\n                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),\n                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),\n                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),\n                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),\n                ('email', models.CharField(max_length=255, unique=True)),\n                ('password', models.CharField(max_length=255)),\n                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),\n                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),\n            ],\n            options={\n                'verbose_name': 'user',\n                'verbose_name_plural': 'users',\n                'abstract': False,\n            },\n            managers=[\n                ('objects', django.contrib.auth.models.UserManager()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Cafe_Info',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('Cafe_Name', models.CharField(default='', max_length=255)),\n                ('Cafe_Address', models.CharField(default='', max_length=500)),\n                ('Cafe_Contact', models.CharField(default='', max_length=15)),\n                ('Owner_Name', models.CharField(default='', max_length=255)),\n                ('Owner_Contact', models.CharField(default='', max_length=15)),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Spotify_Api_Parameters',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('access_token', models.CharField(max_length=500)),\n                ('refresh_token', models.CharField(max_length=500)),\n                ('expires_at', models.IntegerField()),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Spotify_Cred',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('Client_Id', models.CharField(default='', max_length=500)),\n                ('Client_Secret', models.CharField(default='', max_length=500)),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-09-05T21:06:06.527864",
        "file_contents": "# Generated by Django 5.0.1 on 2024-09-05 15:36\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('api', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='cafe_info',\n            name='No_of_Tables',\n            field=models.IntegerField(default=1),\n        ),\n        migrations.CreateModel(\n            name='Vibe_Check_Parameters',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('playlist_vector', models.IntegerField()),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Song_Queue',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('Table_Number', models.IntegerField(default=-1)),\n                ('song_name', models.CharField(max_length=255)),\n                ('song_Id', models.CharField(max_length=255)),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n                ('vibe_check_parameters', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.vibe_check_parameters')),\n            ],\n        ),\n        migrations.DeleteModel(\n            name='Spotify_Cred',\n        ),\n    ]\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-09-06T13:21:01.202409",
        "file_contents": "# Generated by Django 5.0.6 on 2024-09-06 07:51\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('api', '0002_cafe_info_no_of_tables_vibe_check_parameters_and_more'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='vibe_check_parameters',\n            old_name='playlist_vector',\n            new_name='Playlist_Vector',\n        ),\n        migrations.CreateModel(\n            name='Tables_Queue',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('Table_Number', models.IntegerField()),\n                ('Table_Status', models.BooleanField(default=False)),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Track_Queue',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('Table_Number', models.IntegerField(default=-1)),\n                ('Track_Name', models.CharField(max_length=255)),\n                ('Track_Id', models.CharField(max_length=255)),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.DeleteModel(\n            name='Song_Queue',\n        ),\n    ]\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-09-13T20:36:44.073117",
        "file_contents": "# Generated by Django 5.0.6 on 2024-09-13 15:06\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('api', '0003_rename_playlist_vector_vibe_check_parameters_playlist_vector_and_more'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='spotify_api_parameters',\n            name='expires_at',\n            field=models.CharField(),\n        ),\n    ]\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-08-25T14:30:31.483833",
        "file_contents": ""
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-06-25T23:28:33.139419",
        "file_contents": "\"\"\"\nASGI config for Backend project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Backend.settings')\n\napplication = get_asgi_application()\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-09-12T15:29:32.608856",
        "file_contents": "\"\"\"\nDjango settings for Backend project.\n\nGenerated by 'django-admin startproject' using Django 5.0.1.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.0/ref/settings/\n\"\"\"\nfrom datetime import timedelta # import this library top of the settings.py file\nfrom pathlib import Path\nimport os\nimport environ\n\n\n\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\nenv = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env('SECRET_KEY')\nDEBUG = env.bool('DEBUG', default=False)\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])\n\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'corsheaders',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'api',\n    'spotify_api',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'rest_framework_simplejwt',\n    \n]\n\nMIDDLEWARE =  [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n\nROOT_URLCONF = 'Backend.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'Backend.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\n\nDATABASES = {\n    'default': {\n        'ENGINE': env('DB_ENGINE', default='django.db.backends.postgresql'),\n        'NAME': env('DB_NAME'),\n        'USER': env('DB_USER'),\n        'PASSWORD': env('DB_PASSWORD'),\n        'HOST': env('DB_HOST'),\n        'PORT': env('DB_PORT'),\n        'OPTIONS': {\n            'sslmode': env('DB_SSLMODE', default='require'),\n            'sslrootcert': os.path.join(BASE_DIR, env('DB_SSLROOTCERT'))\n        }\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = 'static/'\n\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n\nAUTH_USER_MODEL = 'api.User'\n\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\n "
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-09-05T21:06:03.975863",
        "file_contents": "\"\"\"\nURL configuration for Backend project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.0/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\n\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api-auth/', include('rest_framework.urls')),\n    path('api/',include(\"api.urls\")),\n \n   \n]\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-06-25T23:28:33.144417",
        "file_contents": "\"\"\"\nWSGI config for Backend project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Backend.settings')\n\napplication = get_wsgi_application()\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-06-25T23:28:33.145416",
        "file_contents": ""
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-07-15T16:28:28.250125",
        "file_contents": "from django.contrib import admin\n\n# Register your models here.\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-07-15T16:28:28.252139",
        "file_contents": "from django.apps import AppConfig\n\n\nclass SpotifyApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'spotify_api'\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-07-15T16:28:28.254145",
        "file_contents": "from django.db import models\n\n# Create your models here.\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-09-05T21:05:19.508008",
        "file_contents": ""
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-07-15T16:28:28.256126",
        "file_contents": "from django.test import TestCase\n\n# Create your tests here.\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-09-05T21:04:15.639918",
        "file_contents": ""
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-09-05T21:04:03.552969",
        "file_contents": "\n\n\n\n\n"
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-07-15T16:28:28.258126",
        "file_contents": ""
    },
    {
        "file_type": "py",
        "file_last_modified": "2024-07-15T16:28:28.259125",
        "file_contents": ""
    }
]